@using Sfinx.Maui.Applink.Services
<Router AppAssembly="@typeof(Main).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)"/>
        <FocusOnNavigate RouteData="@routeData" Selector="h1"/>
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
@code
{
    [Inject] public NavigationManager NavigationManager { get; set; }

    protected override void OnInitialized()
    {
        System.Diagnostics.Trace.WriteLine($"On init");
        var requestedUrl = Microsoft.Maui.Storage.Preferences.Get("requestedUrl", null);
        System.Diagnostics.Trace.WriteLine($"On init: {requestedUrl}");
        if (!string.IsNullOrEmpty(requestedUrl))
        {
            NavigationManager.NavigateTo(requestedUrl);
        }
        base.OnInitialized();
        // if (!DeeplinkAppService.IsRegistered)
        // {
        //     Console.WriteLine("on init");
        //     deeplinkAppService.AppLinkReceived += AppServices_AppLinkReceived;
        //     deeplinkAppService.RegisterListener();
        //     if (!string.IsNullOrEmpty(deeplinkAppService.LastAppLink))
        //     {
        //         AppServices_AppLinkReceived(null, new() { Data = deeplinkAppService.LastAppLink });
        //     }
        // }
    
        base.OnInitialized();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        System.Diagnostics.Trace.WriteLine($"On after render");
        var requestedUrl = Microsoft.Maui.Storage.Preferences.Get("requestedUrl", null);
        System.Diagnostics.Trace.WriteLine($"On after render: {requestedUrl}");
        if (!string.IsNullOrEmpty(requestedUrl))
        {
            Preferences.Set("requestedUrl", null);
            NavigationManager.NavigateTo(requestedUrl);
            return Task.CompletedTask;
        }
        else
        {
            return base.OnAfterRenderAsync(firstRender);
        }
    }

    // private void AppServices_AppLinkReceived(object? sender, AppLinkReceivedEventArgs e)
    // {
    //     var url = e.Data;
    //     deeplinkAppService.ResetLastAppLink();
    //     NavigationManager.NavigateTo(e.Data, forceLoad: true);
    // }

    // void IDisposable.Dispose()
    // {
    //     deeplinkAppService.AppLinkReceived -= AppServices_AppLinkReceived;
    //     DeeplinkAppService.IsRegistered = false;
    // }
}